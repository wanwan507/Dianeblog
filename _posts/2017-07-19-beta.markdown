---
layout:     post
title:      "Beta对冲"
subtitle:   "什么是市场中性？"
date:       2017-07-19
author:     "Diane"
header-img: "img/post-bg-universe.jpg"
tags:

---

## 前言

[嗓子疼，快感冒了...](#build) 

总结一下金融知识

<p id = "build"></p>
---
## 正文
<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script>
<p>因子模型
因子模型是通过其他若干项资产回报的线性组合来解释一项资产回报的一种方式，因子模型的一般形式是：</p>
<p>
\begin{align}\notag 
Y=α+β_{1}X_{1}+β_{2}X_{2}+...+β_{n}X_{n}
\end{align}
</p>
<p>
<blockquote>什么是beta?</blockquote>

<p>一项资产的beta是该资产收益率与其他资产收益率通过上述模型回归拟合的β。比如，我们用回归模型
<p>
\begin{align}\notag Y_{gzmt}=α+βX_{benchmark}Y_{gzmt}=α+βX_{benchmark}
\end{align}
</p>来描述贵州茅台收益率相对于沪深300回归的ββ值，如果我们使用模型
<p>
\begin{align}\notag
Y_{gzmt}=α+β_{1}X_{benchmark}+β_{2}X_{wly}Y_{gzmt}=α+β_{1}X_{benchmark}+β_{2}X_{wly}
\end{align}
</p>
那么就会出现两个beta,一个是贵州茅台对沪深300的风险暴露，一个是贵州茅台对五粮液的风险暴露。

通常而言，betabeta更多地指该资产相对于基准指数的风险暴露，即只相对于市场基准的一元线性回归所得到的回归系数。</p>


<blockqoute>
什么是对冲?
</blockquote>
<p>如果我们确定我们的投资组合的回报与市场的关系如下面公式所示：
<p>
\begin{align}\notag
Y_{portfolio}=α+βX_{hs300}
\end{align}
</p>
<p>
\begin{align}\notag
Y_{portfolio}=α+βX_{hs300}
\end{align}
</p>
<p>于是，我们可以建立沪深300空头头寸来对冲市场风险，对冲的市值为−βV,如果我们持有多头组合的市值是V。因为我们多头组合的收益为α+βXhs300α+βXhs300,沪深300对冲空头的收益为−βXhs300−βXhs300,于是我们最终的收益为α+βXhs300−βXhs300=α+βXhs300−βXhs300=α,于是我们的收益来源只有αα，而与市场系统风险没有关系。
</p>

<blockquote>风险暴露</blockquote>

<p>一般而言，beta描述的是持有资产所承担的系统风险敞口这一概念。 如果一项资产相对沪深300基准指数具有较高的β暴露水平，那么在市场上涨时，它的表现将会很好，当市场下跌时，它表现很差。 高ββ对应于高系统风险（高市场风险），意味着你的投资更具有波动性。市场中性策略对于拥有大量现金池的机构（银行、保险、公募基金等）最具吸引力。</p>

<blockquote>风险管理</blockquote>

<p>减少因子风险暴露的过程称为风险管理。对冲是在实践中进行风险管理的最佳方式之一。

本文通过具体案例来了解如何做到市场风险对冲的，我们使用贵州茅台和基准沪深300来构建我们的投资组合，将沪深300的权重设为-β（由于持有基准空头头寸）。</p>

##代码
```
		# 得到过去一年得到的alpha 和beta值
		start_date = '2014-01-01'
		end_date = '2015-01-01'
		asset = D.history_data('600519.SHA',start_date,end_date,fields=['close']).set_index('date')['close']
		benchmark = D.history_data('000300.SHA',start_date,end_date,fields=['close']).set_index('date')['close']
		r_a = asset.pct_change()[1:]
		r_b = benchmark.pct_change()[1:]
		X = r_b.values
		Y = r_a.values
		historical_alpha, historical_beta = linreg(X,Y)
		print('Asset Historical Estimate:')
		print('alpha: ' + str(historical_alpha))
		print('beta: ' + str(historical_beta))

		# 获取下一年的数据:
		start_date = '2015-01-01'
		end_date = '2015-06-01'
		asset = D.history_data('600519.SHA',start_date,end_date,fields=['close']).set_index('date')['close']
		benchmark = D.history_data('000300.SHA',start_date,end_date,fields=['close']).set_index('date')['close']
		asset.name = '600519.SHA'
		benchmark.name = '000300.SHA'
		# 重复前面的过程来计算alpha 和beta值
		r_a = asset.pct_change()[1:]
		r_b = benchmark.pct_change()[1:]
		X = r_b.values
		Y = r_a.values
		alpha, beta = linreg(X,Y)
		print('Asset Out of Sample Estimate:')
		print('alpha: ' + str(alpha))
		print('beta: ' + str(beta))

		# 构建对冲投资组合来计算alpha、beta
		portfolio = -1*historical_beta*r_b + r_a
		P = portfolio.values
		alpha, beta = linreg(X,P)
		print('Portfolio Out of Sample:')
		print ('alpha: ' + str(alpha))
		print ('beta: ' + str(beta))


		# 绘制图形
		portfolio.name = "600519.SHA + Hedge"
		portfolio.plot(alpha=0.9,figsize=[9,6])
		r_a.plot(alpha=0.5);
		r_b.plot(alpha=0.5)
		plt.ylabel("Daily Return")
		plt.legend();



		Asset Historical Estimate:
		alpha: 0.00116253939056
		beta: 0.672934653004
		Asset Out of Sample Estimate:
		alpha: 0.00020366206079
		beta: 0.866552969103
		Portfolio Out of Sample:
		alpha: 0.000203662008879
		beta: 0.193618313006
```

<p>从上图可以看出，对冲后的收益降低了，但波动性也降低了。历史估计出的贝塔值在样本外的一年中是有效的，将资产的贝塔值0.673通过对冲降低到了0.193，也就是说降低了2/3，这样的对冲效果是比较明显的，而且也反映出历史的贝塔值是有效的，当然，要做到更好的效果，可以采取滚动估计贝塔的方法。</p>
<p>市场中性策略是指同时构建多头和空头头寸以对冲市场风险，在市场不论上涨或者下跌的环境下均能获得稳定收益的一种投资策略，市场中性策略主要依据统计套利的量化分析。</p>
<ul>
<li>(1)阿尔法套利：做多具有阿尔法值的证券产品，做空指数期货，实现回避系统性风险下的超越市场指数的阿尔法收益。</li>

<li>(2)贝塔套利：期指市场上做空，在股票市场上构建拟合300指数的成份股，赚取其中的价差，这种被动型的套利。</li>
</ul>

<blockquote>什么是市盈率</blockquote>
<p>市盈率是衡量股价高低和企业盈利能力的一个重要指标。由于市盈率把股价和企业盈利能力结合起来，其水平高低更真实地反映了股票价格的高低。例如，股价同为50元的两只股票，其每股收益分别为5元和1元，则其市盈率分别是10倍和50倍，也就是说具当前的实际价格水平相差5倍。若企业盈利能力不变，这说明投资者以同样50元价格购买的两种股票，要分别在10年和50年以后才能从企业盈利中收回投资。因此市盈率倍数可以简单地理解为要收回投资，最少需要多少年，很明显市盈率越低，越具有吸引力。</p>

<p>通常，此分析是基于历史数据，而对历史风险暴露的估计可能会影响未来的风险暴露。 因此，计算因子风险暴露是不够的。 你必须对风险暴露保持信心，并明白对风险暴露的建模是否合理。</p>

<p>运用多因子模型计算因子风险暴露
,我们可以运用多因子模型分析一个组合中风险和收益的来源，多因子模型对收益的分解如下：<p>

<p>
\begin{align}\notag
R_{i}=a_{i}+b_{i1}F_{1}+b_{i2}F_{2}+...+b_{iK}F_{K}+ϵ_{i}
\end{align}

</p>

<p>通过对历史收益率进行建模，我们可以分析出收益中有多少是来自因子收益率，有多少来自资产特质波动（ϵϵ）。 我们也可以研究投资组合所面临的风险来源，即投资组合的因子暴露。</p>

<p>在风险分析中，我们经常对主动回报（相对于基准的回报）和主动风险（主动回报的标准差，也称为跟踪误差或跟踪风险）进行建模。</p>

<p>例如，我们可计算到一个因子对主动风险的边际贡献——FMCAR。 对于因子jj，表示为：</p>

<p>
\begin{align}\notag
FMCAR_{j}=\frac{bj\sum_{i=1}^{k}{b_{i}cov(F_{j},F_{i})}}{(Active Risk)^2}
\end{align}
</p>
<p>bj表示组合对因子j的风险暴露,bi表示组合对因子i的风险暴露,K表示一共K个因子。FMCARj这项指标这告诉我们，假设其他条件不变，暴露在因子j下我们增加了多少风险。</p>

<p>下面我们运用多因素模型和线性回归工具来计算某只股票的回报率相对于这些因子的风险暴露程度。我们以某个资产组合的主动收益作为被解释变量，对因子做回归，一个因子对主动收益贡献越大，那么这个资产组合的主动收益对于该因子的暴露程度也越高。</p>
```
	# 我们以5只股票的组合（portfolio）举例
	instruments = D.instruments()[:5]
	Stock_matrix = D.history_data(instruments,start_date,end_date,fields=['close'])
	Stock_matrix = pd.pivot_table(Stock_matrix,values='close',index=['date'],columns=['instrument'])
	portfolio = Stock_matrix.pct_change()[1:]
	# 组合的每日收益率（等权重组合）
	R = np.mean(portfolio, axis=1)
	# 基准收益率
	bench = D.history_data('000300.SHA',start_date, end_date, fields=['close']).set_index('date')['close'].pct_change()[1:]
	# 主动收益率
	active = R - bench
	# 建立一个常数项，为下文回归做准备
	constant = pd.TimeSeries(np.ones(len(active.index)), index=active.index)
	df = pd.DataFrame({'R': active,
	'F1': SMB,
	'F2': HML,
	'Constant': constant})
	# 删除含有缺失值的行
	df = df.dropna()
	#线性回归并获取回归系数
	b1, b2 = regression.linear_model.OLS(df['R'], df[['F1', 'F2']]).fit().params
	# 因子对于主动收益的敏感性（即因子暴露）
	print('Sensitivities of active returns to factors:\nSMB: %f\nHML: %f' %  (b1, b2))
	Sensitivities of active returns to factors:
	SMB: 0.430179
	HML: -0.104828
	利用前文给的公式，计算因子对主动收益风险平方的边际贡献（factors' marginal contributions to active risk squared，FMCAR ）

	# 计算因子风险贡献
	F1 = df['F1']
	F2 = df['F2']
	cov = np.cov(F1, F2)
	ar_squared = (active.std())**2
	fmcar1 = (b1*(b2*cov[0,1] + b1*cov[0,0]))/ar_squared
	fmcar2 = (b2*(b1*cov[0,1] + b2*cov[1,1]))/ar_squared
	print('SMB Risk Contribution:', fmcar1)
	print('HML Risk Contribution:', fmcar2)
	SMB Risk Contribution: 0.145330519205
	HML Risk Contribution: 0.0321851978612
```
<p>余下的风险可以归结于一些特有的风险因素，即我们没有加入模型的因子或者资产组合本身独有的某种风险。 通常我们会关注一下对这些因子的风险暴露随时间如何变化。让我们rolling一下～</p>
```
		# 计算滚动的beta
		model = pd.stats.ols.MovingOLS(y = df['R'], x=df[['F1', 'F2']], 
		window_type='rolling', 
		window=100)   
		rolling_parameter_estimates = model.beta
		rolling_parameter_estimates.plot()
		plt.title('Computed Betas');
		plt.legend(['F1 Beta', 'F2 Beta', 'Intercept']);
```
现在我们来看看FMCAR是如何随时间变化的
```
		# 计算方差协方差
		# 去除有缺省值的日期，从有实际有效值的日期开始
		covariances = pd.rolling_cov(df[['F1', 'F2']], window=100)[99:]
		# 计算主动风险
		active_risk_squared = pd.rolling_std(active, window = 100)[99:]**2
		# 计算beta
		betas = rolling_parameter_estimates[['F1', 'F2']]

		# 新建一个空的dataframe
		FMCAR = pd.DataFrame(index=betas.index, columns=betas.columns)

		# 每个因子循环
		for factor in betas.columns:
		# 每一天循环
		for t in betas.index:
		# 求beta与协方差之积的和，见公式
		s = np.sum(betas.loc[t] * covariances[t][factor])
		# 获取beta
		b = betas.loc[t][factor]
		# 获取主动风险
		AR = active_risk_squared.loc[t]
		# 估计当天的FMCAR
		FMCAR[factor][t] = b * s / AR
```
<p>了解历史数据中组合对各个因子的暴露程度是很有趣的，但只有将它用在对未来预测上时，它才有用武之地。但我们不是总能够放心地认为未来的情况与现在相同，由于随时间会变化，对风险暴露程度取平均值也很容易出现问题。我们可以给均值加上一个置信区间，但只有当其分布是正态分布或者表现很稳健才行。我们来看看Jarque-Bera测验的结果。</p>
```
		from statsmodels.stats.stattools import jarque_bera
		_, pvalue1, _, _ = jarque_bera(FMCAR['F1'].dropna().values)
		_, pvalue2, _, _ = jarque_bera(FMCAR['F2'].dropna().values)

		<p>print('p-value F1_FMCAR is normally distributed', pvalue1)
		print('p-value F2_FMCAR is normally distributed', pvalue2)
		p-value F1_FMCAR is normally distributed 4.05960522776e-08
		p-value F2_FMCAR is normally distributed 0.000299975153613
```
<p>p_value显示我们可以显著的拒绝其为正态分布，可见对于未来这些因素会导致多少风险暴露是很难估计的，所以在使用这些统计模型去估计风险暴露并以此为依据来对冲是需要万分小心的。</p>

## 后记

没有后记
